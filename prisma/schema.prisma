generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                              String         @id @default(uuid())
  externalUserId                  String         @unique
  email                           String         @unique
  imageUrl                        String
  username                        String         @unique
  createdAt                       DateTime       @default(now())
  updatedAt                       DateTime       @updatedAt
  bio                             String?
  name                            String?
  Collection                      Collection[]
  Follow_Follow_followerIdToUser  Follow[]       @relation("Follow_followerIdToUser")
  Follow_Follow_followingIdToUser Follow[]       @relation("Follow_followingIdToUser")
  WatchHistory                    WatchHistory[]
  watchList                       WatchList?
}

model Collection {
  id        String @id
  userId    String
  animeId   String
  episodeId String
  status    Status
  User      User   @relation(fields: [userId], references: [id])

  @@index([animeId])
  @@index([episodeId])
  @@index([userId])
}

model Follow {
  id                            String   @id
  followerId                    String
  followingId                   String
  createdAt                     DateTime @default(now())
  updatedAt                     DateTime
  User_Follow_followerIdToUser  User     @relation("Follow_followerIdToUser", fields: [followerId], references: [id], onDelete: Cascade)
  User_Follow_followingIdToUser User     @relation("Follow_followingIdToUser", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model WatchHistory {
  id           String   @id
  userId       String
  animeId      String
  episodeId    String
  lastWatched  DateTime
  providerName Provider
  User         User     @relation(fields: [userId], references: [id])

  @@index([animeId])
  @@index([episodeId])
  @@index([userId])
}

model WatchList {
  id     String  @id @default(uuid())
  user   User    @relation(fields: [userId], references: [id])
  userId String  @unique
  Anime  Anime[] @relation(name: "AnimeToWatchList")
}

model Anime {
  id        String      @id
  title     String
  WatchList WatchList[] @relation(name: "AnimeToWatchList")
}

enum Provider {
  ZORO
  GOGOANIME
}

enum Status {
  WATCHING
  COMPLETED
  ON_HOLD
  DROPPED
  PLAN_TO_WATCH
}
