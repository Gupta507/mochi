generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String         @id @default(uuid())
  externalUserId String         @unique
  email          String         @unique
  imageUrl       String         @db.Text
  name           String?        @db.Text
  username       String         @unique @default(uuid())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  bio            String?
  watchHistory   WatchHistory[]
  collection     Collection[]
  following      Follow[]       @relation("Following")
  followedBy     Follow[]       @relation("FollowedBy")
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  follower    User     @relation(name: "Following", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation(name: "FollowedBy", fields: [followingId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

enum Provider {
  ZORO
  GOGOANIME
}

model WatchHistory {
  id           String   @id @default(cuid())
  userId       String
  animeId      String
  episodeId    String
  lastWatched  DateTime
  providerName Provider

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([animeId])
  @@index([episodeId])
}

enum Status {
  WATCHING
  COMPLETED
  ON_HOLD
  DROPPED
  PLAN_TO_WATCH
}

model Collection {
  id        String @id @default(cuid())
  userId    String
  animeId   String
  episodeId String
  status    Status

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([animeId])
  @@index([episodeId])
}
